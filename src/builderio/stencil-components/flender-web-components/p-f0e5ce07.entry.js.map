{"version":3,"names":["fleButtonCss","FleButtonStyle0","FleButton","handleClick","this","buttonClicked","emit","render","classListFromProps","generateClassList","h","Host","key","class","onClick","styleClass","styleType","appearanceClass","appearance","sizeClass","size","fleCategoryCss","FleCategoryStyle0","FleCategory","fleHeroBannerCss","FleHeroBannerStyle0","FleHeroBanner","infoAlignmentClass","infoPosition","mediaUrl","mediaAltText","headline","category","description","fleImageInfoTileCss","FleImageInfoTileStyle0","FleImageInfoTile","reverseClass","imagePosition","fleInfoCss","FleInfoStyle0","FleInfo","fleMediaCss","FleMediaStyle0","FleMedia","undefined","EMPTY_STRING","isImage","match","isVideo","console","log","renderImg","renderVideo","url","alt","src","autoPlay","muted","loop","playsInline","type","title","fleProductListItemCss","FleProductListItemStyle0","FleProductListItem","HASHTAG","onButtonClicked","onClicked","ctaText","productClicked"],"sources":["src/components/fle-button/fle-button.scss?tag=fle-button&encapsulation=shadow","src/components/fle-button/fle-button.tsx","src/components/fle-category/fle-category.scss?tag=fle-category&encapsulation=shadow","src/components/fle-category/fle-category.tsx","src/components/fle-hero-banner/fle-hero-banner.scss?tag=fle-hero-banner","src/components/fle-hero-banner/fle-hero-banner.tsx","src/components/fle-image-info-tile/fle-image-info-tile.scss?tag=fle-image-info-tile","src/components/fle-image-info-tile/fle-image-info-tile.tsx","src/components/fle-info/fle-info.scss?tag=fle-info","src/components/fle-info/fle-info.tsx","src/components/fle-media/fle-media.scss?tag=fle-media&encapsulation=shadow","src/components/fle-media/fle-media.tsx","src/components/fle-product-list-item/fle-product-list-item.scss?tag=fle-product-list-item","src/components/fle-product-list-item/fle-product-list-item.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\nbutton {\r\n  padding: 0 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.small-size {\r\n  height: 24px;\r\n  border-radius: 12px;\r\n  font-size: 16px;\r\n}\r\n\r\n.medium-size {\r\n  height: 48px;\r\n  border-radius: 24px;\r\n  font-size: 16px;\r\n}\r\n\r\n.primary-style {\r\n  background-color: $primary-color;\r\n  color: $primary-text-color;\r\n  border-color: $primary-color;\r\n}\r\n\r\n.secondary-style {\r\n  color: $primary-text-color;\r\n  border-color: $primary-color;\r\n}\r\n\r\n.solid-appearance {\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: $primary-hover-color;\r\n  }\r\n}\r\n\r\n.outline-appearance {\r\n  background-color: transparent;\r\n  color: $primary-color;\r\n  border: 2px solid $primary-color;\r\n\r\n  &:hover {\r\n    background-color: $primary-color;\r\n    color: $primary-text-color;\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FleButtonAppearance, FleButtonSize, FleButtonStyle } from './fle-button.model';\n\n@Component({\n  tag: 'fle-button',\n  styleUrl: 'fle-button.scss',\n  shadow: true\n})\nexport class FleButton {\n  // @Prop() title: string;\n  @Prop() styleType: FleButtonStyle = 'primary';\n  @Prop() appearance: FleButtonAppearance = 'solid';\n  @Prop() size: FleButtonSize = 'medium';\n\n  @Event({\n    eventName: 'buttonClicked',\n  }) buttonClicked: EventEmitter<void>;\n\n  handleClick() {\n    this.buttonClicked.emit();\n  }\n\n  render() {\n    const classListFromProps = this.generateClassList();\n    return (\n      <Host>\n        <button class={classListFromProps} onClick={() => this.handleClick()}>\n          <slot>\n          </slot>\n        </button>\n      </Host>\n    );\n  }\n\n  private generateClassList(): string {\n    const styleClass = this.styleType === 'primary' ? 'primary-style' : 'secondary-style';\n    const appearanceClass = this.appearance === 'solid' ? 'solid-appearance' : 'outline-appearance';\n    const sizeClass = this.size === 'small' ? 'small-size' : 'medium-size';\n\n    return `${styleClass} ${appearanceClass} ${sizeClass}`;\n  }\n}\n",":host {\n  display: block;\n  min-width: 12rem;\n  padding: 0.5rem;\n  color: white;\n  text-transform: uppercase;\n  background-color: $primary-color;\n}\n","import { Component, Host, h } from '@stencil/core';\n\n@Component({\n  tag: 'fle-category',\n  styleUrl: 'fle-category.scss',\n  shadow: true,\n})\nexport class FleCategory {\n  render() {\n    return (\n      <Host>\n          <slot></slot>\n      </Host>\n    );\n  }\n}\n",":host { }\n\n.fle-hero-banner {\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 30rem;\n\n  .media {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n\n  .info {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    //width: 90%;\n    //max-width: 90%;\n\n    @media (min-width: map-get($grid-breakpoints, lg)) {\n      width: 30%;\n      max-width: 550px;\n\n      &.left {\n        right: unset;\n        left: 10%;\n      }\n\n      &.right {\n        right: 10%;\n        left: unset;\n      }\n    }\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { HorizontalAlignment } from '../../utils/components.model';\n\n@Component({\n  tag: 'fle-hero-banner',\n  styleUrl: 'fle-hero-banner.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleHeroBanner {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n  @Prop() infoPosition: HorizontalAlignment = 'left';\n  @Prop() buttonUrls: string[];\n\n  render() {\n    const infoAlignmentClass = this.infoPosition === 'left' ? 'left' : 'right';\n    return (\n      <Host class=\"fle-hero-banner\">\n        <fle-media class=\"media\" media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>\n        <fle-info class={`info ${infoAlignmentClass}`} headline={this.headline} category={this.category} description={this.description}></fle-info>\n        {/*<slot></slot>*/}\n      </Host>\n    );\n  }\n}\n",":host {\n}\n\n.fle-image-info-tile {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-around;\n  align-items: center;\n\n  @media (min-width: map-get($grid-breakpoints, lg)) {\n    max-width: 100%;\n    flex-flow: row nowrap;\n    padding-left: 32px;\n    padding-right: 32px;\n    gap: 32px;\n\n    &.reverse {\n      flex-direction: row-reverse;\n    }\n  }\n\n  .media {\n    @media (min-width: map-get($grid-breakpoints, lg)) {\n      flex: 1 1 0;\n    }\n  }\n\n  .info {\n    background-color: unset;\n    color: black;\n\n    @media (min-width: map-get($grid-breakpoints, lg)) {\n      flex: 1 1 0;\n    }\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { HorizontalAlignment } from '../../utils/components.model';\n\n@Component({\n  tag: 'fle-image-info-tile',\n  styleUrl: 'fle-image-info-tile.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleImageInfoTile {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n  @Prop() imagePosition: HorizontalAlignment = 'left';\n\n  render() {\n    const reverseClass = this.imagePosition === 'right' ? 'reverse' : '';\n    return (\n      <Host class={`fle-image-info-tile ${reverseClass}`}>\n        <fle-media class=\"media\" media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>\n        <fle-info class=\"info\"\n                  headline={this.headline}\n                  category={this.category}\n                  description={this.description}\n        ></fle-info>\n        {/*<slot></slot>*/}\n      </Host>\n    );\n  }\n}\n",":host { }\n\n.fle-info {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: flex-start;\n  overflow: hidden;\n  padding: 3rem;\n  // use color variables\n  background-color: #003e6270;\n  color: white;\n  font-weight: 100;\n\n  h1 {\n    color: $primary-color;\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'fle-info',\n  styleUrl: 'fle-info.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleInfo {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n\n  // TODO handle button\n  render() {\n    return (\n      <Host class=\"fle-info\">\n        <fle-category>{this.category}</fle-category>\n        <h1>{this.headline}</h1>\n        <p>{this.description}</p>\n        <fle-button>Learn More</fle-button>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n  width: 100%;\n  height: 100%;\n  z-index: -10;\n\n  img, video {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { EMPTY_STRING } from '../../utils/utils';\n\n@Component({\n  tag: 'fle-media',\n  styleUrl: 'fle-media.scss',\n  shadow: true,\n})\nexport class FleMedia {\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n\n  render() {\n    if (this.mediaUrl === undefined || this.mediaUrl === EMPTY_STRING) {\n      return;\n    }\n\n    const isImage = this.mediaUrl.match(/\\.(jpeg|jpg|gif|png)/) != null;\n    const isVideo = this.mediaUrl.match(/\\.(mp4|webm|ogg)/) != null;\n\n    console.log(this.mediaUrl, isImage)\n\n    return (\n      <Host>\n        {isImage && this.renderImg(this.mediaUrl, this.mediaAltText)}\n        {isVideo && this.renderVideo(this.mediaUrl, this.mediaAltText)}\n      </Host>\n    );\n  }\n\n  private renderImg(url: string, alt: string = EMPTY_STRING) {\n    return <img src={url} alt={alt}></img>;\n  }\n\n  private renderVideo(url: string, alt: string = EMPTY_STRING) {\n    return <video autoPlay muted loop playsInline>\n      <source src={url} type=\"video/mp4\" title={alt} />\n      <source src={url} type=\"video/webm\" title={alt} />\n      <source src={url} type=\"video/ogg\" title={alt} />\n    </video>;\n  }\n}\n",":host {\n  display: block;\n}\n\n.fle-product-list-item {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: flex-start;\n  overflow: hidden;\n  padding: 3rem;\n  font-weight: 100;\n  gap: 10px;\n\n  h3 {\n    color: $primary-color;\n  }\n\n  // unstile a tag cause we use button for the link\n  a,\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: inherit;\n    text-decoration: inherit;\n    font-weight: inherit;\n  }\n}\n","import { Component, Host, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { HASHTAG } from '../../utils/utils';\n\n@Component({\n  tag: 'fle-product-list-item',\n  styleUrl: 'fle-product-list-item.scss',\n  shadow: false,\n})\nexport class FleProductListItem {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() ctaText: string;\n  @Prop() ctaUrl: string = HASHTAG;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n\n  @Event() productClicked: EventEmitter<void>;\n\n  render() {\n    return (\n      <Host class=\"fle-product-list-item\">\n        <fle-category>{this.category}</fle-category>\n        <h3>{this.headline}</h3>\n        <fle-media media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>\n        <p>{this.description}</p>\n        {/* TODO Maybe it's better to use click event instead a tag */}\n        {/*<a href={this.ctaUrl} target=\"_blank\">*/}\n          <fle-button onButtonClicked={() => this.onClicked()}>\n            {this.ctaText}\n          </fle-button>\n        {/*</a>*/}\n      </Host>\n    );\n  }\n\n  private onClicked() {\n    this.productClicked.emit();\n  }\n}\n"],"mappings":"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","ignoreList":[]}