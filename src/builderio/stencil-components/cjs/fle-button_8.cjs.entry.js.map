{"file":"fle-button.fle-category.fle-grid-view.fle-hero-banner.fle-image-info-tile.fle-info.fle-media.fle-product-list-item.entry.cjs.js","mappings":"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","names":["h","Host","EMPTY_STRING","HASHTAG"],"sources":["src/components/fle-button/fle-button.scss?tag=fle-button&encapsulation=shadow","src/components/fle-button/fle-button.tsx","src/components/fle-category/fle-category.scss?tag=fle-category&encapsulation=shadow","src/components/fle-category/fle-category.tsx","src/components/fle-grid-view/fle-grid-view.scss?tag=fle-grid-view","src/components/fle-grid-view/fle-grid-view.tsx","src/components/fle-hero-banner/fle-hero-banner.scss?tag=fle-hero-banner","src/components/fle-hero-banner/fle-hero-banner.tsx","src/components/fle-image-info-tile/fle-image-info-tile.scss?tag=fle-image-info-tile","src/components/fle-image-info-tile/fle-image-info-tile.tsx","src/components/fle-info/fle-info.scss?tag=fle-info","src/components/fle-info/fle-info.tsx","src/components/fle-media/fle-media.scss?tag=fle-media&encapsulation=shadow","src/components/fle-media/fle-media.tsx","src/components/fle-product-list-item/fle-product-list-item.scss?tag=fle-product-list-item","src/components/fle-product-list-item/fle-product-list-item.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\nbutton {\r\n  padding: 0 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.small-size {\r\n  height: 24px;\r\n  border-radius: 12px;\r\n  font-size: 16px;\r\n}\r\n\r\n.medium-size {\r\n  height: 48px;\r\n  border-radius: 24px;\r\n  font-size: 16px;\r\n}\r\n\r\n.primary-style {\r\n  background-color: $primary-color;\r\n  color: $primary-text-color;\r\n  border-color: $primary-color;\r\n}\r\n\r\n.secondary-style {\r\n  color: $primary-text-color;\r\n  border-color: $primary-color;\r\n}\r\n\r\n.solid-appearance {\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: $primary-hover-color;\r\n  }\r\n}\r\n\r\n.outline-appearance {\r\n  background-color: transparent;\r\n  color: $primary-color;\r\n  border: 2px solid $primary-color;\r\n\r\n  &:hover {\r\n    background-color: $primary-color;\r\n    color: $primary-text-color;\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FleButtonAppearance, FleButtonSize, FleButtonStyle } from './fle-button.model';\n\n@Component({\n  tag: 'fle-button',\n  styleUrl: 'fle-button.scss',\n  shadow: true\n})\nexport class FleButton {\n  // @Prop() title: string;\n  @Prop() styleType: FleButtonStyle = 'primary';\n  @Prop() appearance: FleButtonAppearance = 'solid';\n  @Prop() size: FleButtonSize = 'medium';\n\n  @Event({\n    eventName: 'buttonClicked',\n  }) buttonClicked: EventEmitter<void>;\n\n  handleClick() {\n    this.buttonClicked.emit();\n  }\n\n  render() {\n    const classListFromProps = this.generateClassList();\n    return (\n      <Host>\n        <button class={classListFromProps} onClick={() => this.handleClick()}>\n          <slot>\n          </slot>\n        </button>\n      </Host>\n    );\n  }\n\n  private generateClassList(): string {\n    const styleClass = this.styleType === 'primary' ? 'primary-style' : 'secondary-style';\n    const appearanceClass = this.appearance === 'solid' ? 'solid-appearance' : 'outline-appearance';\n    const sizeClass = this.size === 'small' ? 'small-size' : 'medium-size';\n\n    return `${styleClass} ${appearanceClass} ${sizeClass}`;\n  }\n}\n",":host {\n  display: block;\n  min-width: 12rem;\n  padding: 0.5rem;\n  color: white;\n  font-size: $normal-text-size;\n  text-transform: uppercase;\n  background-color: $primary-color;\n}\n","import { Component, Host, h } from '@stencil/core';\n\n@Component({\n  tag: 'fle-category',\n  styleUrl: 'fle-category.scss',\n  shadow: true,\n})\nexport class FleCategory {\n  render() {\n    return (\n      <Host>\n          <slot></slot>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n.fle-grid-view {\n  display: grid;\n  gap: 8px;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n}\n","import { Component, Host, h } from '@stencil/core';\n\n@Component({\n  tag: 'fle-grid-view',\n  styleUrl: 'fle-grid-view.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleGridView {\n  render() {\n    return (\n      <Host class=\"fle-grid-view\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n",":host { }\n\n.fle-hero-banner {\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 30rem;\n\n  .media {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n\n  .info {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    //width: 90%;\n    //max-width: 90%;\n\n    @media (min-width: map-get($grid-breakpoints, xl)) {\n      width: 30%;\n      max-width: 550px;\n\n      &.left {\n        right: unset;\n        left: 10%;\n      }\n\n      &.right {\n        right: 10%;\n        left: unset;\n      }\n    }\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { HorizontalAlignment } from '../../utils/components.model';\n\n@Component({\n  tag: 'fle-hero-banner',\n  styleUrl: 'fle-hero-banner.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleHeroBanner {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n  @Prop() infoPosition: HorizontalAlignment = 'left';\n  @Prop() buttonUrls: string[];\n\n  render() {\n    const infoAlignmentClass = this.infoPosition === 'left' ? 'left' : 'right';\n    return (\n      <Host class=\"fle-hero-banner\">\n        <fle-media class=\"media\" media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>\n        <fle-info class={`info ${infoAlignmentClass}`} headline={this.headline} category={this.category} description={this.description}></fle-info>\n        {/*<slot></slot>*/}\n      </Host>\n    );\n  }\n}\n",":host {\n}\n\n.fle-image-info-tile {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-around;\n  align-items: center;\n\n  @media (min-width: map-get($grid-breakpoints, lg)) {\n    max-width: 100%;\n    flex-flow: row nowrap;\n    padding-left: 15%;\n    padding-right: 15%;\n    gap: 32px;\n\n    &.reverse {\n      flex-direction: row-reverse;\n    }\n  }\n\n  .media {\n    @media (min-width: map-get($grid-breakpoints, lg)) {\n      flex: 1 1 0;\n    }\n  }\n\n  .info {\n    background-color: unset;\n    color: black;\n\n    @media (min-width: map-get($grid-breakpoints, lg)) {\n      flex: 1 1 0;\n    }\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { HorizontalAlignment } from '../../utils/components.model';\n\n@Component({\n  tag: 'fle-image-info-tile',\n  styleUrl: 'fle-image-info-tile.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleImageInfoTile {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n  @Prop() imagePosition: HorizontalAlignment = 'left';\n\n  render() {\n    const reverseClass = this.imagePosition === 'right' ? 'reverse' : '';\n    return (\n      <Host class={`fle-image-info-tile ${reverseClass}`}>\n        <fle-media class=\"media\" media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>\n        <fle-info class=\"info\"\n                  headline={this.headline}\n                  category={this.category}\n                  description={this.description}\n        ></fle-info>\n        {/*<slot></slot>*/}\n      </Host>\n    );\n  }\n}\n",":host { }\n\n.fle-info {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: flex-start;\n  overflow: hidden;\n  padding: 3rem;\n  // use color variables\n  background-color: #003e6270;\n  color: white;\n  font-weight: 100;\n  gap: 16px;\n\n  h2 {\n    color: $primary-color;\n    font-size: $title-text-size;\n    font-weight: 100;\n  }\n\n  p {\n    font-size: $normal-text-size;\n    font-weight: 100;\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'fle-info',\n  styleUrl: 'fle-info.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleInfo {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n\n  // TODO handle button\n  render() {\n    return (\n      <Host class=\"fle-info\">\n        {this.category && <fle-category>{this.category}</fle-category>}\n        {this.headline && <h2>{this.headline}</h2>}\n        {this.description && <p>{this.description}</p>}\n        <fle-button>Learn More</fle-button>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n  width: 100%;\n  height: 100%;\n  z-index: -10;\n\n  img, video {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { EMPTY_STRING } from '../../utils/utils';\n\n@Component({\n  tag: 'fle-media',\n  styleUrl: 'fle-media.scss',\n  shadow: true,\n})\nexport class FleMedia {\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n\n  render() {\n    if (this.mediaUrl === undefined || this.mediaUrl === EMPTY_STRING) {\n      return;\n    }\n\n    const isImage = this.mediaUrl.match(/\\.(jpeg|jpg|gif|png)/) != null;\n    const isVideo = this.mediaUrl.match(/\\.(mp4|webm|ogg)/) != null;\n\n    console.log(this.mediaUrl, isImage)\n\n    return (\n      <Host>\n        {isImage && this.renderImg(this.mediaUrl, this.mediaAltText)}\n        {isVideo && this.renderVideo(this.mediaUrl, this.mediaAltText)}\n      </Host>\n    );\n  }\n\n  private renderImg(url: string, alt: string = EMPTY_STRING) {\n    return <img src={url} alt={alt}></img>;\n  }\n\n  private renderVideo(url: string, alt: string = EMPTY_STRING) {\n    return <video autoPlay muted loop playsInline>\n      <source src={url} type=\"video/mp4\" title={alt} />\n      <source src={url} type=\"video/webm\" title={alt} />\n      <source src={url} type=\"video/ogg\" title={alt} />\n    </video>;\n  }\n}\n",":host {\n  display: block;\n}\n\n.fle-product-list-item {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: flex-start;\n  overflow: hidden;\n  padding: 3rem;\n  font-weight: 100;\n  gap: 16px;\n\n  h3 {\n    color: $primary-color;\n    font-size: $title-text-size;\n    font-weight: 100;\n  }\n\n  p {\n    font-size: $normal-text-size;\n    font-weight: 100;\n  }\n\n  // unstile a tag cause we use button for the link\n  a,\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: inherit;\n    text-decoration: inherit;\n    font-weight: inherit;\n  }\n}\n","import { Component, Host, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { HASHTAG } from '../../utils/utils';\n\n@Component({\n  tag: 'fle-product-list-item',\n  styleUrl: 'fle-product-list-item.scss',\n  shadow: false, // no shadow dom cause CMSs system need access for live preview\n})\nexport class FleProductListItem {\n  @Prop() headline: string;\n  @Prop() category: string;\n  @Prop() description: string;\n  @Prop() ctaText: string;\n  @Prop() ctaUrl: string = HASHTAG;\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n\n  @Event() productClicked: EventEmitter<void>;\n\n  render() {\n    return (\n      <Host class=\"fle-product-list-item\">\n        {this.category && <fle-category>{this.category}</fle-category>}\n        {this.headline && <h3>{this.headline}</h3>}\n        {this.mediaUrl && <fle-media media-url={this.mediaUrl} media-alt-text={this.mediaAltText}></fle-media>}\n        {this.description && <p>{this.description}</p>}\n        {/* TODO Maybe it's better to use click event instead a tag */}\n        {/*<a href={this.ctaUrl} target=\"_blank\">*/}\n          <fle-button onButtonClicked={() => this.onClicked()}>\n            {this.ctaText}\n          </fle-button>\n        {/*</a>*/}\n      </Host>\n    );\n  }\n\n  private onClicked() {\n    this.productClicked.emit();\n  }\n}\n"],"version":3}