{"version":3,"file":"fle-media.js","sourceRoot":"","sources":["../../../src/components/fle-media/fle-media.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAOjD,MAAM,OAAO,QAAQ;;;;;IAInB,MAAM;QACJ,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAClE,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,IAAI,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC;QAEhE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QAEnC,OAAO,CACL,EAAC,IAAI;YACF,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC;YAC3D,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CACzD,CACR,CAAC;IACJ,CAAC;IAEO,SAAS,CAAC,GAAW,EAAE,MAAc,YAAY;QACvD,OAAO,WAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAQ,CAAC;IACzC,CAAC;IAEO,WAAW,CAAC,GAAW,EAAE,MAAc,YAAY;QACzD,OAAO,aAAO,QAAQ,QAAC,KAAK,QAAC,IAAI,QAAC,WAAW;YAC3C,cAAQ,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,WAAW,EAAC,KAAK,EAAE,GAAG,GAAI;YACjD,cAAQ,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,YAAY,EAAC,KAAK,EAAE,GAAG,GAAI;YAClD,cAAQ,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,WAAW,EAAC,KAAK,EAAE,GAAG,GAAI,CAC3C,CAAC;IACX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Prop } from '@stencil/core';\nimport { EMPTY_STRING } from '../../utils/utils';\n\n@Component({\n  tag: 'fle-media',\n  styleUrl: 'fle-media.scss',\n  shadow: true,\n})\nexport class FleMedia {\n  @Prop() mediaUrl: string;\n  @Prop() mediaAltText: string;\n\n  render() {\n    if (this.mediaUrl === undefined || this.mediaUrl === EMPTY_STRING) {\n      return;\n    }\n\n    const isImage = this.mediaUrl.match(/\\.(jpeg|jpg|gif|png)/) != null;\n    const isVideo = this.mediaUrl.match(/\\.(mp4|webm|ogg)/) != null;\n\n    console.log(this.mediaUrl, isImage)\n\n    return (\n      <Host>\n        {isImage && this.renderImg(this.mediaUrl, this.mediaAltText)}\n        {isVideo && this.renderVideo(this.mediaUrl, this.mediaAltText)}\n      </Host>\n    );\n  }\n\n  private renderImg(url: string, alt: string = EMPTY_STRING) {\n    return <img src={url} alt={alt}></img>;\n  }\n\n  private renderVideo(url: string, alt: string = EMPTY_STRING) {\n    return <video autoPlay muted loop playsInline>\n      <source src={url} type=\"video/mp4\" title={alt} />\n      <source src={url} type=\"video/webm\" title={alt} />\n      <source src={url} type=\"video/ogg\" title={alt} />\n    </video>;\n  }\n}\n"]}