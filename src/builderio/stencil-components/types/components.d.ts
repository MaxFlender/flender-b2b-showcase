/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { FleButtonAppearance, FleButtonSize, FleButtonStyle } from "./components/fle-button/fle-button.model";
import { HorizontalAlignment } from "./utils/components.model";
export { FleButtonAppearance, FleButtonSize, FleButtonStyle } from "./components/fle-button/fle-button.model";
export { HorizontalAlignment } from "./utils/components.model";
export namespace Components {
    interface FleButton {
        "appearance": FleButtonAppearance;
        "size": FleButtonSize;
        "styleType": FleButtonStyle;
    }
    interface FleCategory {
    }
    interface FleHeroBanner {
        "buttonUrls": string[];
        "category": string;
        "description": string;
        "headline": string;
        "infoPosition": HorizontalAlignment;
        "mediaAltText": string;
        "mediaUrl": string;
    }
    interface FleImageInfoTile {
        "category": string;
        "description": string;
        "headline": string;
        "imagePosition": HorizontalAlignment;
        "mediaAltText": string;
        "mediaUrl": string;
    }
    interface FleInfo {
        "category": string;
        "description": string;
        "headline": string;
    }
    interface FleMedia {
        "mediaAltText": string;
        "mediaUrl": string;
    }
    interface FleProductListItem {
        "category": string;
        "ctaText": string;
        "ctaUrl": string;
        "description": string;
        "headline": string;
        "mediaAltText": string;
        "mediaUrl": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface FleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFleButtonElement;
}
export interface FleProductListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFleProductListItemElement;
}
declare global {
    interface HTMLFleButtonElementEventMap {
        "buttonClicked": void;
    }
    interface HTMLFleButtonElement extends Components.FleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFleButtonElementEventMap>(type: K, listener: (this: HTMLFleButtonElement, ev: FleButtonCustomEvent<HTMLFleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFleButtonElementEventMap>(type: K, listener: (this: HTMLFleButtonElement, ev: FleButtonCustomEvent<HTMLFleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFleButtonElement: {
        prototype: HTMLFleButtonElement;
        new (): HTMLFleButtonElement;
    };
    interface HTMLFleCategoryElement extends Components.FleCategory, HTMLStencilElement {
    }
    var HTMLFleCategoryElement: {
        prototype: HTMLFleCategoryElement;
        new (): HTMLFleCategoryElement;
    };
    interface HTMLFleHeroBannerElement extends Components.FleHeroBanner, HTMLStencilElement {
    }
    var HTMLFleHeroBannerElement: {
        prototype: HTMLFleHeroBannerElement;
        new (): HTMLFleHeroBannerElement;
    };
    interface HTMLFleImageInfoTileElement extends Components.FleImageInfoTile, HTMLStencilElement {
    }
    var HTMLFleImageInfoTileElement: {
        prototype: HTMLFleImageInfoTileElement;
        new (): HTMLFleImageInfoTileElement;
    };
    interface HTMLFleInfoElement extends Components.FleInfo, HTMLStencilElement {
    }
    var HTMLFleInfoElement: {
        prototype: HTMLFleInfoElement;
        new (): HTMLFleInfoElement;
    };
    interface HTMLFleMediaElement extends Components.FleMedia, HTMLStencilElement {
    }
    var HTMLFleMediaElement: {
        prototype: HTMLFleMediaElement;
        new (): HTMLFleMediaElement;
    };
    interface HTMLFleProductListItemElementEventMap {
        "productClicked": void;
    }
    interface HTMLFleProductListItemElement extends Components.FleProductListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFleProductListItemElementEventMap>(type: K, listener: (this: HTMLFleProductListItemElement, ev: FleProductListItemCustomEvent<HTMLFleProductListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFleProductListItemElementEventMap>(type: K, listener: (this: HTMLFleProductListItemElement, ev: FleProductListItemCustomEvent<HTMLFleProductListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFleProductListItemElement: {
        prototype: HTMLFleProductListItemElement;
        new (): HTMLFleProductListItemElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "fle-button": HTMLFleButtonElement;
        "fle-category": HTMLFleCategoryElement;
        "fle-hero-banner": HTMLFleHeroBannerElement;
        "fle-image-info-tile": HTMLFleImageInfoTileElement;
        "fle-info": HTMLFleInfoElement;
        "fle-media": HTMLFleMediaElement;
        "fle-product-list-item": HTMLFleProductListItemElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface FleButton {
        "appearance"?: FleButtonAppearance;
        "onButtonClicked"?: (event: FleButtonCustomEvent<void>) => void;
        "size"?: FleButtonSize;
        "styleType"?: FleButtonStyle;
    }
    interface FleCategory {
    }
    interface FleHeroBanner {
        "buttonUrls"?: string[];
        "category"?: string;
        "description"?: string;
        "headline"?: string;
        "infoPosition"?: HorizontalAlignment;
        "mediaAltText"?: string;
        "mediaUrl"?: string;
    }
    interface FleImageInfoTile {
        "category"?: string;
        "description"?: string;
        "headline"?: string;
        "imagePosition"?: HorizontalAlignment;
        "mediaAltText"?: string;
        "mediaUrl"?: string;
    }
    interface FleInfo {
        "category"?: string;
        "description"?: string;
        "headline"?: string;
    }
    interface FleMedia {
        "mediaAltText"?: string;
        "mediaUrl"?: string;
    }
    interface FleProductListItem {
        "category"?: string;
        "ctaText"?: string;
        "ctaUrl"?: string;
        "description"?: string;
        "headline"?: string;
        "mediaAltText"?: string;
        "mediaUrl"?: string;
        "onProductClicked"?: (event: FleProductListItemCustomEvent<void>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "fle-button": FleButton;
        "fle-category": FleCategory;
        "fle-hero-banner": FleHeroBanner;
        "fle-image-info-tile": FleImageInfoTile;
        "fle-info": FleInfo;
        "fle-media": FleMedia;
        "fle-product-list-item": FleProductListItem;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fle-button": LocalJSX.FleButton & JSXBase.HTMLAttributes<HTMLFleButtonElement>;
            "fle-category": LocalJSX.FleCategory & JSXBase.HTMLAttributes<HTMLFleCategoryElement>;
            "fle-hero-banner": LocalJSX.FleHeroBanner & JSXBase.HTMLAttributes<HTMLFleHeroBannerElement>;
            "fle-image-info-tile": LocalJSX.FleImageInfoTile & JSXBase.HTMLAttributes<HTMLFleImageInfoTileElement>;
            "fle-info": LocalJSX.FleInfo & JSXBase.HTMLAttributes<HTMLFleInfoElement>;
            "fle-media": LocalJSX.FleMedia & JSXBase.HTMLAttributes<HTMLFleMediaElement>;
            "fle-product-list-item": LocalJSX.FleProductListItem & JSXBase.HTMLAttributes<HTMLFleProductListItemElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
